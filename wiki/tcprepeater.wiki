一．	项目名称

TCP中转器

二．	项目描述

1.	实现一个tcp服务器，该服务器有若干个后端

2.	该服务器作为前端接收客户端数据，并把客户端数据转发给后端，同时把后端发回的数据转发给客户端，不需要对内容进行解析。

3.	该服务器对后端的服务器进行监控，并剔除死去的后端，加入活过来的后端。

4.	前端服务器可以采用轮询或基于源ip端口hash两种调度方法来来选择服务的后端服务器


三．	开发工具及平台

基于linux系统开发，开发工具主要包括make, GCC, vim


四．	源文件说明

源文件主目录下主要包括以下文件：

config:配置文件目录

include:源文件需要用到的头文件所在的目录

lib：源程序所用到的各包裹文件所在的目录

src：该目录服务器端实现的主要源码

test：测试用程序所在的目录，主要包括客户端测试程序

其他的是一些可执行文件和Makefile文件


五．	实验步骤

1.	配置节点类型

在程序主目录的config文件夹中，可以通过修改node.ini文件的内容来配置节点信息。该配置文件的格式为key = value。

最顶端的traffic server需要读取xml配置文件了解后端服务器信息。

可以配置的参数有：

node_type: 有MS和LB两种选择，分别指是前台服务器还是后台服务器

lbs_config: 指定后台服务器信息的配置文件，前台服务器在启动后会读取该配置文件。

sche_type: 指定前台服务器的调度类型，提供了轮询和基于ip端口hash两种方法

tcp_threads: 指定服务器用于处理tcp消息的线程数

udp_thread: 指定服务器用于处理udp消息的线程数

max_count: 活的后端服务器的最大心跳计数，大于该值说明后端服务器失活

father_ip: 指定后端服务器的前端服务器ip地址

max_links: 指定后端服务器所能处理的最大连接数，扩展用。

服务器启动时通过读取配置文件的信息来初始化服务器节点。



2.	编译

由于源程序需要读取xml配置文件，所以编译时需要xml库。本项目使用的是libxml2-2.7.8。

编译只需在主文件夹下执行./run.sh即可

3.	测试

服务器端运行./server，程序会根据配置文件中设置的节点类型选择以前台服务器还是后台服务器的方式运行

客户端运行./client  -t 请求线程数 –a  前端服务器ip地址

六．	注意事项

1）	程序运行前要确认系统防火墙是否关闭，或者打开16666，16665和16664的访问许可。

2）	运行前需要执行./run.sh文件